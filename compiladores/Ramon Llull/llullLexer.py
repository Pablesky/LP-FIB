# Generated from llull.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\37")
        buf.write("\u009e\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7")
        buf.write("\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3")
        buf.write("\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\23")
        buf.write("\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\32\3\32\3\32\3\33\6\33\u0086\n\33\r\33\16\33\u0087")
        buf.write("\3\34\3\34\7\34\u008c\n\34\f\34\16\34\u008f\13\34\3\34")
        buf.write("\3\34\3\35\6\35\u0094\n\35\r\35\16\35\u0095\3\36\6\36")
        buf.write("\u0099\n\36\r\36\16\36\u009a\3\36\3\36\2\2\37\3\3\5\4")
        buf.write("\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\67\359\36;\37\3\2\6\4\2C\\c|\3\2$$\3\2\62;\4")
        buf.write("\2\f\f\"\"\2\u00a1\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2")
        buf.write("\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21")
        buf.write("\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
        buf.write("\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2")
        buf.write("\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2")
        buf.write("\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2")
        buf.write("\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\3=\3\2")
        buf.write("\2\2\5?\3\2\2\2\7A\3\2\2\2\tC\3\2\2\2\13E\3\2\2\2\rG\3")
        buf.write("\2\2\2\17I\3\2\2\2\21K\3\2\2\2\23M\3\2\2\2\25P\3\2\2\2")
        buf.write("\27S\3\2\2\2\31U\3\2\2\2\33W\3\2\2\2\35Z\3\2\2\2\37]\3")
        buf.write("\2\2\2!b\3\2\2\2#h\3\2\2\2%j\3\2\2\2\'l\3\2\2\2)p\3\2")
        buf.write("\2\2+r\3\2\2\2-x\3\2\2\2/z\3\2\2\2\61|\3\2\2\2\63\u0081")
        buf.write("\3\2\2\2\65\u0085\3\2\2\2\67\u0089\3\2\2\29\u0093\3\2")
        buf.write("\2\2;\u0098\3\2\2\2=>\7*\2\2>\4\3\2\2\2?@\7+\2\2@\6\3")
        buf.write("\2\2\2AB\7`\2\2B\b\3\2\2\2CD\7,\2\2D\n\3\2\2\2EF\7\61")
        buf.write("\2\2F\f\3\2\2\2GH\7\'\2\2H\16\3\2\2\2IJ\7-\2\2J\20\3\2")
        buf.write("\2\2KL\7/\2\2L\22\3\2\2\2MN\7?\2\2NO\7?\2\2O\24\3\2\2")
        buf.write("\2PQ\7>\2\2QR\7@\2\2R\26\3\2\2\2ST\7>\2\2T\30\3\2\2\2")
        buf.write("UV\7@\2\2V\32\3\2\2\2WX\7>\2\2XY\7?\2\2Y\34\3\2\2\2Z[")
        buf.write("\7@\2\2[\\\7?\2\2\\\36\3\2\2\2]^\7t\2\2^_\7g\2\2_`\7c")
        buf.write("\2\2`a\7f\2\2a \3\2\2\2bc\7y\2\2cd\7j\2\2de\7k\2\2ef\7")
        buf.write("n\2\2fg\7g\2\2g\"\3\2\2\2hi\7}\2\2i$\3\2\2\2jk\7\177\2")
        buf.write("\2k&\3\2\2\2lm\7h\2\2mn\7q\2\2no\7t\2\2o(\3\2\2\2pq\7")
        buf.write("=\2\2q*\3\2\2\2rs\7y\2\2st\7t\2\2tu\7k\2\2uv\7v\2\2vw")
        buf.write("\7g\2\2w,\3\2\2\2xy\7?\2\2y.\3\2\2\2z{\7.\2\2{\60\3\2")
        buf.write("\2\2|}\7x\2\2}~\7q\2\2~\177\7k\2\2\177\u0080\7f\2\2\u0080")
        buf.write("\62\3\2\2\2\u0081\u0082\7k\2\2\u0082\u0083\7h\2\2\u0083")
        buf.write("\64\3\2\2\2\u0084\u0086\t\2\2\2\u0085\u0084\3\2\2\2\u0086")
        buf.write("\u0087\3\2\2\2\u0087\u0085\3\2\2\2\u0087\u0088\3\2\2\2")
        buf.write("\u0088\66\3\2\2\2\u0089\u008d\7$\2\2\u008a\u008c\n\3\2")
        buf.write("\2\u008b\u008a\3\2\2\2\u008c\u008f\3\2\2\2\u008d\u008b")
        buf.write("\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u0090\3\2\2\2\u008f")
        buf.write("\u008d\3\2\2\2\u0090\u0091\7$\2\2\u00918\3\2\2\2\u0092")
        buf.write("\u0094\t\4\2\2\u0093\u0092\3\2\2\2\u0094\u0095\3\2\2\2")
        buf.write("\u0095\u0093\3\2\2\2\u0095\u0096\3\2\2\2\u0096:\3\2\2")
        buf.write("\2\u0097\u0099\t\5\2\2\u0098\u0097\3\2\2\2\u0099\u009a")
        buf.write("\3\2\2\2\u009a\u0098\3\2\2\2\u009a\u009b\3\2\2\2\u009b")
        buf.write("\u009c\3\2\2\2\u009c\u009d\b\36\2\2\u009d<\3\2\2\2\7\2")
        buf.write("\u0087\u008d\u0095\u009a\3\b\2\2")
        return buf.getvalue()


class llullLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    ID = 26
    STRING = 27
    NUM = 28
    WS = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", 
            "'<>'", "'<'", "'>'", "'<='", "'>='", "'read'", "'while'", "'{'", 
            "'}'", "'for'", "';'", "'write'", "'='", "','", "'void'", "'if'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "STRING", "NUM", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "ID", "STRING", 
                  "NUM", "WS" ]

    grammarFileName = "llull.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


