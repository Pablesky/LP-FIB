# Generated from llull.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2!")
        buf.write("\u00ad\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5")
        buf.write("\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\13\3\13")
        buf.write("\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\34\6\34\u008f\n\34\r\34\16\34\u0090\3\35\3\35\7\35")
        buf.write("\u0095\n\35\f\35\16\35\u0098\13\35\3\35\3\35\3\36\6\36")
        buf.write("\u009d\n\36\r\36\16\36\u009e\3\37\3\37\3\37\3\37\3 \3")
        buf.write(" \7 \u00a7\n \f \16 \u00aa\13 \3 \3 \2\2!\3\3\5\4\7\5")
        buf.write("\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35")
        buf.write("\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33")
        buf.write("\65\34\67\359\36;\37= ?!\3\2\7\4\2C\\c|\3\2$$\3\2\62;")
        buf.write("\5\2\f\f\"\"%%\4\2\f\f\17\17\2\u00b0\2\3\3\2\2\2\2\5\3")
        buf.write("\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2")
        buf.write("\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2")
        buf.write("\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2")
        buf.write("\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2")
        buf.write("\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3")
        buf.write("\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2")
        buf.write("\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\3A\3\2\2\2\5C\3\2")
        buf.write("\2\2\7E\3\2\2\2\tG\3\2\2\2\13I\3\2\2\2\rK\3\2\2\2\17M")
        buf.write("\3\2\2\2\21O\3\2\2\2\23Q\3\2\2\2\25T\3\2\2\2\27W\3\2\2")
        buf.write("\2\31Y\3\2\2\2\33[\3\2\2\2\35^\3\2\2\2\37a\3\2\2\2!f\3")
        buf.write("\2\2\2#l\3\2\2\2%n\3\2\2\2\'p\3\2\2\2)t\3\2\2\2+v\3\2")
        buf.write("\2\2-|\3\2\2\2/~\3\2\2\2\61\u0080\3\2\2\2\63\u0085\3\2")
        buf.write("\2\2\65\u0088\3\2\2\2\67\u008e\3\2\2\29\u0092\3\2\2\2")
        buf.write(";\u009c\3\2\2\2=\u00a0\3\2\2\2?\u00a4\3\2\2\2AB\7*\2\2")
        buf.write("B\4\3\2\2\2CD\7+\2\2D\6\3\2\2\2EF\7`\2\2F\b\3\2\2\2GH")
        buf.write("\7,\2\2H\n\3\2\2\2IJ\7\61\2\2J\f\3\2\2\2KL\7\'\2\2L\16")
        buf.write("\3\2\2\2MN\7-\2\2N\20\3\2\2\2OP\7/\2\2P\22\3\2\2\2QR\7")
        buf.write("?\2\2RS\7?\2\2S\24\3\2\2\2TU\7>\2\2UV\7@\2\2V\26\3\2\2")
        buf.write("\2WX\7>\2\2X\30\3\2\2\2YZ\7@\2\2Z\32\3\2\2\2[\\\7>\2\2")
        buf.write("\\]\7?\2\2]\34\3\2\2\2^_\7@\2\2_`\7?\2\2`\36\3\2\2\2a")
        buf.write("b\7t\2\2bc\7g\2\2cd\7c\2\2de\7f\2\2e \3\2\2\2fg\7y\2\2")
        buf.write("gh\7j\2\2hi\7k\2\2ij\7n\2\2jk\7g\2\2k\"\3\2\2\2lm\7}\2")
        buf.write("\2m$\3\2\2\2no\7\177\2\2o&\3\2\2\2pq\7h\2\2qr\7q\2\2r")
        buf.write("s\7t\2\2s(\3\2\2\2tu\7=\2\2u*\3\2\2\2vw\7y\2\2wx\7t\2")
        buf.write("\2xy\7k\2\2yz\7v\2\2z{\7g\2\2{,\3\2\2\2|}\7?\2\2}.\3\2")
        buf.write("\2\2~\177\7.\2\2\177\60\3\2\2\2\u0080\u0081\7x\2\2\u0081")
        buf.write("\u0082\7q\2\2\u0082\u0083\7k\2\2\u0083\u0084\7f\2\2\u0084")
        buf.write("\62\3\2\2\2\u0085\u0086\7k\2\2\u0086\u0087\7h\2\2\u0087")
        buf.write("\64\3\2\2\2\u0088\u0089\7g\2\2\u0089\u008a\7n\2\2\u008a")
        buf.write("\u008b\7u\2\2\u008b\u008c\7g\2\2\u008c\66\3\2\2\2\u008d")
        buf.write("\u008f\t\2\2\2\u008e\u008d\3\2\2\2\u008f\u0090\3\2\2\2")
        buf.write("\u0090\u008e\3\2\2\2\u0090\u0091\3\2\2\2\u00918\3\2\2")
        buf.write("\2\u0092\u0096\7$\2\2\u0093\u0095\n\3\2\2\u0094\u0093")
        buf.write("\3\2\2\2\u0095\u0098\3\2\2\2\u0096\u0094\3\2\2\2\u0096")
        buf.write("\u0097\3\2\2\2\u0097\u0099\3\2\2\2\u0098\u0096\3\2\2\2")
        buf.write("\u0099\u009a\7$\2\2\u009a:\3\2\2\2\u009b\u009d\t\4\2\2")
        buf.write("\u009c\u009b\3\2\2\2\u009d\u009e\3\2\2\2\u009e\u009c\3")
        buf.write("\2\2\2\u009e\u009f\3\2\2\2\u009f<\3\2\2\2\u00a0\u00a1")
        buf.write("\t\5\2\2\u00a1\u00a2\3\2\2\2\u00a2\u00a3\b\37\2\2\u00a3")
        buf.write(">\3\2\2\2\u00a4\u00a8\7%\2\2\u00a5\u00a7\n\6\2\2\u00a6")
        buf.write("\u00a5\3\2\2\2\u00a7\u00aa\3\2\2\2\u00a8\u00a6\3\2\2\2")
        buf.write("\u00a8\u00a9\3\2\2\2\u00a9\u00ab\3\2\2\2\u00aa\u00a8\3")
        buf.write("\2\2\2\u00ab\u00ac\b \2\2\u00ac@\3\2\2\2\7\2\u0090\u0096")
        buf.write("\u009e\u00a8\3\b\2\2")
        return buf.getvalue()


class llullLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    ID = 27
    STRING = 28
    NUM = 29
    WS = 30
    COMMENT = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", 
            "'<>'", "'<'", "'>'", "'<='", "'>='", "'read'", "'while'", "'{'", 
            "'}'", "'for'", "';'", "'write'", "'='", "','", "'void'", "'if'", 
            "'else'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "STRING", "NUM", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "ID", "STRING", "NUM", "WS", "COMMENT" ]

    grammarFileName = "llull.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


