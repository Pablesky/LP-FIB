# Generated from llull.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2 ")
        buf.write("\u00a5\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3")
        buf.write("\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13")
        buf.write("\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\23\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\34")
        buf.write("\6\34\u008d\n\34\r\34\16\34\u008e\3\35\3\35\7\35\u0093")
        buf.write("\n\35\f\35\16\35\u0096\13\35\3\35\3\35\3\36\6\36\u009b")
        buf.write("\n\36\r\36\16\36\u009c\3\37\6\37\u00a0\n\37\r\37\16\37")
        buf.write("\u00a1\3\37\3\37\2\2 \3\3\5\4\7\5\t\6\13\7\r\b\17\t\21")
        buf.write("\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24")
        buf.write("\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37")
        buf.write("= \3\2\6\4\2C\\c|\3\2$$\3\2\62;\4\2\f\f\"\"\2\u00a8\2")
        buf.write("\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3")
        buf.write("\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2")
        buf.write("\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2")
        buf.write("\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%")
        buf.write("\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\3?\3\2\2\2\5")
        buf.write("A\3\2\2\2\7C\3\2\2\2\tE\3\2\2\2\13G\3\2\2\2\rI\3\2\2\2")
        buf.write("\17K\3\2\2\2\21M\3\2\2\2\23O\3\2\2\2\25R\3\2\2\2\27U\3")
        buf.write("\2\2\2\31W\3\2\2\2\33Y\3\2\2\2\35\\\3\2\2\2\37_\3\2\2")
        buf.write("\2!d\3\2\2\2#j\3\2\2\2%l\3\2\2\2\'n\3\2\2\2)r\3\2\2\2")
        buf.write("+t\3\2\2\2-z\3\2\2\2/|\3\2\2\2\61~\3\2\2\2\63\u0083\3")
        buf.write("\2\2\2\65\u0086\3\2\2\2\67\u008c\3\2\2\29\u0090\3\2\2")
        buf.write("\2;\u009a\3\2\2\2=\u009f\3\2\2\2?@\7*\2\2@\4\3\2\2\2A")
        buf.write("B\7+\2\2B\6\3\2\2\2CD\7`\2\2D\b\3\2\2\2EF\7,\2\2F\n\3")
        buf.write("\2\2\2GH\7\61\2\2H\f\3\2\2\2IJ\7\'\2\2J\16\3\2\2\2KL\7")
        buf.write("-\2\2L\20\3\2\2\2MN\7/\2\2N\22\3\2\2\2OP\7?\2\2PQ\7?\2")
        buf.write("\2Q\24\3\2\2\2RS\7>\2\2ST\7@\2\2T\26\3\2\2\2UV\7>\2\2")
        buf.write("V\30\3\2\2\2WX\7@\2\2X\32\3\2\2\2YZ\7>\2\2Z[\7?\2\2[\34")
        buf.write("\3\2\2\2\\]\7@\2\2]^\7?\2\2^\36\3\2\2\2_`\7t\2\2`a\7g")
        buf.write("\2\2ab\7c\2\2bc\7f\2\2c \3\2\2\2de\7y\2\2ef\7j\2\2fg\7")
        buf.write("k\2\2gh\7n\2\2hi\7g\2\2i\"\3\2\2\2jk\7}\2\2k$\3\2\2\2")
        buf.write("lm\7\177\2\2m&\3\2\2\2no\7h\2\2op\7q\2\2pq\7t\2\2q(\3")
        buf.write("\2\2\2rs\7=\2\2s*\3\2\2\2tu\7y\2\2uv\7t\2\2vw\7k\2\2w")
        buf.write("x\7v\2\2xy\7g\2\2y,\3\2\2\2z{\7?\2\2{.\3\2\2\2|}\7.\2")
        buf.write("\2}\60\3\2\2\2~\177\7x\2\2\177\u0080\7q\2\2\u0080\u0081")
        buf.write("\7k\2\2\u0081\u0082\7f\2\2\u0082\62\3\2\2\2\u0083\u0084")
        buf.write("\7k\2\2\u0084\u0085\7h\2\2\u0085\64\3\2\2\2\u0086\u0087")
        buf.write("\7g\2\2\u0087\u0088\7n\2\2\u0088\u0089\7u\2\2\u0089\u008a")
        buf.write("\7g\2\2\u008a\66\3\2\2\2\u008b\u008d\t\2\2\2\u008c\u008b")
        buf.write("\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u008c\3\2\2\2\u008e")
        buf.write("\u008f\3\2\2\2\u008f8\3\2\2\2\u0090\u0094\7$\2\2\u0091")
        buf.write("\u0093\n\3\2\2\u0092\u0091\3\2\2\2\u0093\u0096\3\2\2\2")
        buf.write("\u0094\u0092\3\2\2\2\u0094\u0095\3\2\2\2\u0095\u0097\3")
        buf.write("\2\2\2\u0096\u0094\3\2\2\2\u0097\u0098\7$\2\2\u0098:\3")
        buf.write("\2\2\2\u0099\u009b\t\4\2\2\u009a\u0099\3\2\2\2\u009b\u009c")
        buf.write("\3\2\2\2\u009c\u009a\3\2\2\2\u009c\u009d\3\2\2\2\u009d")
        buf.write("<\3\2\2\2\u009e\u00a0\t\5\2\2\u009f\u009e\3\2\2\2\u00a0")
        buf.write("\u00a1\3\2\2\2\u00a1\u009f\3\2\2\2\u00a1\u00a2\3\2\2\2")
        buf.write("\u00a2\u00a3\3\2\2\2\u00a3\u00a4\b\37\2\2\u00a4>\3\2\2")
        buf.write("\2\7\2\u008e\u0094\u009c\u00a1\3\b\2\2")
        return buf.getvalue()


class llullLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    ID = 27
    STRING = 28
    NUM = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", 
            "'<>'", "'<'", "'>'", "'<='", "'>='", "'read'", "'while'", "'{'", 
            "'}'", "'for'", "';'", "'write'", "'='", "','", "'void'", "'if'", 
            "'else'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "STRING", "NUM", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "ID", "STRING", "NUM", "WS" ]

    grammarFileName = "llull.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


